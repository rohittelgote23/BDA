
Aim: Implement matrix multiplication with Hadoop Map Reduce.
Theory:
What is MapReduce?
MapReduce is a processing technique and a program model for distributed computing based on java. The MapReduce algorithm contains two important tasks, namely Map and Reduce.
Map takes a set of data and converts it into another set of data, where individual elements are broken down into tuples (key/value pairs). Secondly, reduce task, which takes the output from a map as an input and combines those data tuples into a smaller set of tuples. As the sequence of the name MapReduce implies, the reduce task is always performed after the map job.
The major advantage of MapReduce is that it is easy to scale data processing over multiple computing nodes. Under the MapReduce model, the data processing primitives are called mappers and reducers. Decomposing a data processing application into mappers and reducers is sometimes nontrivial. But, once we write an application in the MapReduce form, scaling the application to run over hundreds, thousands, or even tens of thousands of machines in a cluster is merely a configuration change. This simple scalability is what has attracted many programmers to use the MapReduce model.

The Algorithm
Generally the MapReduce paradigm is based on sending the computer to where the data resides!
 MapReduce program executes in three stages, namely map stage, shuffle stage, and reduce stage.
.
Map stage − The map or mapper’s job is to process the input data. Generally the input data is in the form of file or directory and is stored in the Hadoop file system (HDFS). The input file is passed to the mapper function line by line. The mapper processes the data and creates several small chunks of data.

Reduce stage − This stage is the combination of the Shuffle stage and the Reduce stage. The Reducer’s job is to process the data that comes from the mapper. After processing, it produces a new set of output, which will be stored in the HDFS.
During a MapReduce job, Hadoop sends the Map and Reduce tasks to the appropriate servers in the cluster.

The framework manages all the details of data-passing such as issuing tasks, verifying task completion, and copying data around the cluster between the nodes.
Most of the computing takes place on nodes with data on local disks that reduces the network traffic.

After completion of the given tasks, the cluster collects and reduces the data to           form an appropriate result, and sends it back to the Hadoop server.


Inputs and Outputs (Java Perspective)
The MapReduce framework operates on <key, value> pairs, that is, the framework views the input to the job as a set of <key, value> pairs and produces a set of <key, value> pairs as the output of the job, conceivably of different types.
The key and the value classes should be in serialized manner by the framework and hence, need to implement the Writable interface. Additionally, the key classes have to implement the Writable-Comparable interface to facilitate sorting by the framework. Input and Output types of a MapReduce job − (Input) <k1, v1> → map → <k2, v2> → reduce → <k3, v3>(Output).

 	

			Input			Output

	
Map			<k1, v1>   		list (<k2, v2>)

Reduce		<k2, list(v2)>   list (<k3, v3>)



Terminology
Pay Load − Applications implement the Map and the Reduce functions, and form the core of the job.
Mapper − Mapper maps the input key/value pairs to a set of intermediate key/value pair.
Named Node − Node that manages the Hadoop Distributed File System (HDFS).
Data Node − Node where data is presented in advance before any processing takes place.
Master Node − Node where Job Tracker runs and which accepts job requests from clients.
Slave Node − Node where Map and Reduce program runs.
Job Tracker − Schedules jobs and tracks the assign jobs to Task tracker.
Task Tracker − Tracks the task and reports status to JobTracker.
Job − A program is an execution of a Mapper and Reducer across a dataset.
Task − An execution of a Mapper or a Reducer on a slice of data.
Task Attempt −A particular instance of an attempt to execute a task on a SlaveNode.
Pre-requisite:
•	Java Installation - Check whether the Java is installed or not using the following command.
	java -version
•	Hadoop Installation - Check whether the Hadoop is installed or not using the following command.
	hadoop version

Input.txt
a,
b,



Code:
MatrixMultipliaction.java
import java.io.IOException;
import java.util.Date;
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.FileSystem;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.DoubleWritable;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.input.TextInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.mapreduce.lib.output.TextOutputFormat;

public class MatrixMultiplication {
	public static void main(String[] args) throws Exception {
		if(args.length !=5){
			System.err.println("Usage : Matrix <input path> <output path> m n p");
			System.exit(-1);
		}
                System.err.println("Input path: " + args[0]);
                System.err.println("Output path: " + args[1]);
		
	   Configuration conf = new Configuration();
	   conf.set("dimM", args[2]); // set matrix dimension m
                conf.set("dimN", args[3]); //set matrix dimension n
                conf.set("dimP", args[4]); //set matrix dimension p
	   Job job = Job.getInstance(conf);	
	   FileSystem fs = FileSystem.get(conf);
	   job.setJarByClass(MatrixMultiplication.class);
		
		job.setMapOutputKeyClass(Text.class); 
		job.setMapOutputValueClass(Text.class);
		
		job.setOutputKeyClass(Text.class);
		job.setOutputValueClass(DoubleWritable.class);
				
		job.setMapperClass(MatrixMapper.class);
		job.setReducerClass(MatrixReducer.class);
				
		job.setInputFormatClass(TextInputFormat.class);
		job.setOutputFormatClass(TextOutputFormat.class);
				
		Path input = new Path(args[0]);
		Path output = new Path(args[1]);	
		if(!fs.exists(input)) {
			System.err.println("Please provide a valid HFDS input path");
			System.exit(-1);
		}
		if(fs.exists(output)) {
			fs.delete(output, true);
		}
		FileInputFormat.addInputPath(job, input);
		
		FileOutputFormat.setOutputPath(job, output);
		long start = new Date().getTime();		
		job.waitForCompletion(true);
                long end = new Date().getTime();
                System.out.println("Job took: " + (end - start) + " milliseconds");
                fs.close();			
	}

        public static class MatrixMapper extends Mapper<LongWritable,Text,Text,Text> {
	/**
	 * Produces a key-value output where the key is the matrix location (ex: 01) and the value is of the form
         * matrix,index,value (ex: a,1,5)
         * NOTE: The index is the column for entries of the matrix A and the row for the entries of matrix B   */
	
	@Override
	public void map(LongWritable key, Text value,Context context)
	throws IOException, InterruptedException{
                //entries are matrix, row, column, value
                String[] entry = value.toString().split(",");

	   String matrixName = entry[0];
                String matrixRow = entry[1];
                String matrixCol = entry[2];
                String matrixVal = entry[3];
                int m = Integer.parseInt( context.getConfiguration().get("dimM") );
                int p = Integer.parseInt( context.getConfiguration().get("dimP") );
	
		if (matrixName.matches("a")){
			for (int i =0; i < m; i++) {
                                String rowCol = matrixRow + i;
                                //System.out.println(String.format("input: %s, key: %s, val: %s", value.toString(), entry[1].trim() + i,
                                              //String.format("a,%s,%s", entry[2].trim(), entry[3].trim())));
			       context.write(new Text(rowCol),
                                              new Text(String.format("a,%s,%s", matrixCol, matrixVal)));
			}
		}
		if (matrixName.matches("b")){
			for (int i =0; i < p; i++){
                                String rowCol = i + matrixCol;
                                //System.out.println(String.format("input: %s, key: %s, val: %s", value.toString(), i + entry[2].trim(),
                                  //  String.format("a,%s,%s", entry[1].trim(), entry[3].trim())));
				context.write(new Text(rowCol),
                                              new Text(String.format("b,%s,%s", matrixRow, matrixVal)));
			}
		}	
	}
    }


    public static class MatrixReducer extends Reducer<Text, Text, Text, DoubleWritable>{
	/**
         * Produces a key value output where the key is the matrix location (ex: 01) and the value is the result of the matrix
         * multiplication (ex: 56) */
	@Override
	protected void reduce(Text key, Iterable<Text> values,Context context)
	throws IOException, InterruptedException {
                int n = Integer.parseInt( context.getConfiguration().get("dimN") );
		
		double[] row = new double[n];
		double[] col = new double[n];
                for (Text val : values){
	           String[] entries = val.toString().split(",");
                        String matrixName = entries[0];
                        String multiplicationIndex = entries[1];
                        String multiplicationValue = entries[2];

                        int index = Integer.parseInt(multiplicationIndex);

                        if (matrixName.matches("a")){
				row[index] = Double.parseDouble(multiplicationValue);
			}
			if (matrixName.matches("b")){
				col[index] = Double.parseDouble(multiplicationValue);
			}
		}
		double sum = 0;
		for (int i = 0 ; i < n; i++){
			sum += row[i]*col[i];
		}
		context.write(key, new DoubleWritable(sum));
	}
    }
}

	
Run MatrixMultiplication.jar :
hadoop jar MatrixMultiplication.jar MatrixMultiplication /rohit/input.txt /rohit/output/ 2 2 2



Conclusion:
	Hence we successfully performed the program for matrix multiplication using map reduce.

